---
- name: Add the Tor APT key
  apt_key: id=886DDD89
           data="{{ item }}"
  with_file: tor-signing.key

- name: Add the Tor repository
  apt_repository: repo="deb https://deb.torproject.org/torproject.org {{ ansible_lsb.codename }} main"

- name: Install the package to keep the Tor signing key current
  apt: name=deb.torproject.org-keyring

- name: Install obfsproxy and Tor
  apt: name={{ item }}
  with_items:
    - obfsproxy
    - tor

- name: Generate a random Nickname for the bridge
  shell: grep -v -P "[\x80-\xFF]" /usr/share/dict/american-english-huge | sed -e "s/'//" | shuf -n 2 | xargs | sed -e 's/ //' | cut -c 1-16 > {{ tor_bridge_nickname_file }}
         creates={{ tor_bridge_nickname_file }}

- name: Register the bridge's random Nickname
  command: cat {{ tor_bridge_nickname_file }}
  register: tor_bridge_nickname

- name: Generate the bridge config file
  template: src=torrc.j2
            dest=/etc/tor/torrc
            owner=root
            group=root
            mode=644

# Workaround for Tor Ticket #13716
#   https://trac.torproject.org/projects/tor/ticket/13716
- name: Copy the fixed AppArmor profile into place
  copy: src=system_tor
        dest=/etc/apparmor.d/system_tor
        owner=root
        group=root
        mode=644

- name: Restart Tor so the obfsproxy ports and server fingerprint will be available in the state file, and the hidden service for the Gateway will start running
  service: name=tor
           state=restarted

- name: Wait until obfsproxy information has shown up in the state file
  wait_for: path=/var/lib/tor/state
            search_regex={{ item }}
  with_items: "{{ tor_obfs_transports }}"

- name: Wait until the hidden service is online
  wait_for: path={{ tor_hidden_service_directory }}/hostname

- name: Register the Tor Hidden Service hostname
  command: cat {{ tor_hidden_service_directory }}/hostname
  register: tor_hidden_service_hostname

- name: Discover the randomly chosen obfs ports
  shell: grep {{ item }} /var/lib/tor/state | sed -e 's/^.*://'
  register: tor_obfs_ports
  with_items: "{{ tor_obfs_transports }}"

- name: Set the obfs3 port fact
  set_fact: tor_obfs3_port={{ tor_obfs_ports.results[0].stdout }}

- name: Discover the server fingerprint
  command: awk '{ print $2 }' /var/lib/tor/fingerprint
  register: tor_fingerprint

- name: Create the Tor Gateway directory
  file: path={{ tor_gateway_location }}
        owner=www-data
        group=www-data
        mode=750
        state=directory

- name: Generate the Tor obfs3 QR code
  shell: echo -n '{{ tor_obfs3_bridge_line }}' | python -c 'import urllib; import sys; print urllib.quote(sys.stdin.read());' | qrencode -s 12 -o {{ tor_obfs3_qr_code }}

- name: Generate the Markdown Tor instructions
  template: src=instructions.md.j2
            dest={{ tor_markdown_instructions }}

- name: Convert the Markdown Tor instructions into HTML and surround them with the header and footer template
  shell: markdown {{ tor_markdown_instructions }} | cat {{ streisand_header_template }} - {{ streisand_footer_template }} > {{ tor_html_instructions }}
