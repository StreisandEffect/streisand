---
- name: "Add the Tor APT key"
  apt_key:
    url: "https://deb.torproject.org/torproject.org/A3C4F0F979CAA22CDBA8F512EE8CBC9E886DDD89.asc"
    state: present

- name: Add the Tor repository
  apt_repository:
    repo: 'deb https://deb.torproject.org/torproject.org {{ ansible_lsb.codename }} main'
  register: tor_add_apt_repository
  until: not tor_add_apt_repository.failed
  retries: "{{ apt_repository_retries }}"
  delay: "{{ apt_repository_delay }}"

- name: Install the package to keep the Tor signing key current
  apt:
    package: deb.torproject.org-keyring

- name: Install obfs4, Tor, and virtualenv
  apt:
    package:
      - obfs4proxy
      - tor
      # Vanguards dependency
      - python-virtualenv

# Update the firewall to allow Tor and obfs4proxy
# NOTE(@cpu): we do this early in the role because the Tor daemon will check if
# the obfs4proxy port is externally accessible during startup and we want to
# make sure it is.
- import_tasks: firewall.yml

- name: Generate a random Nickname for the bridge
  shell: "{{ streisand_word_gen.tor_nickname | trim }} > {{ tor_bridge_nickname_file }}"
  args:
    creates: "{{ tor_bridge_nickname_file }}"

- name: Register the bridge's random Nickname
  command: cat {{ tor_bridge_nickname_file }}
  register: tor_bridge_nickname
  changed_when: False

- name: Generate the bridge config file
  template:
    src: torrc.j2
    dest: /etc/tor/torrc
    owner: root
    group: root
    mode: 0644

- name: Generate the hidden service torrc config file
  template:
    src: torrc-hidden-service.j2
    dest: /etc/tor/torrc-hidden-service
    owner: root
    group: root
    mode: 0644

- name: Generate the vanguards config file
  template:
    src: vanguards.conf.j2
    dest: "{{ tor_vanguards_config }}"
    owner: root
    group: root
    mode: 0644

# We have to setup an apparmor profile for the tor hidden service
# since we're trying to use the non-default tor data directories,
# control socket, PID file, etc.
- name: Copy Tor Hidden Service AppArmor profile
  copy:
    src: system_tor_hs
    dest: /etc/apparmor.d/system_tor_hs
    owner: root
    group: root
    mode: 0644

# Permissions are handled by the tor-hidden-service.service file
# (systemd) each time the service is started/restarted.
- name: Create hidden service data directory
  file:
    path: "{{ tor_hidden_service_state_directory }}"
    state: directory

- name: Generate the hidden service systemd file
  template:
    src: tor-hidden-service.service.j2
    dest: /etc/systemd/system/tor-hidden-service.service
    owner: root
    group: root
    mode: 0644

- name: Generate the vanguards service systemd file
  template:
    src: vanguards.service.j2
    dest: /etc/systemd/system/vanguards.service
    owner: root
    group: root
    mode: 0644

# Run tor processes as separate users locally. By default,
# tor runs as "debian-tor". Since we're running the hidden service
# and bridge as separate tor processes, it makes sense to run
# these under separate user accounts as well.
- name: Create local hidden service user
  user:
    name: "{{ tor_hidden_service_user }}"
    shell: /bin/false
    system: yes
    create_home: False
    # the "home" folder for debian-tor by default is
    # set to /var/lib/tor, since we aren't using that dir
    # here we set debian-tor-hs home to the new HS data dir
    home: "{{ tor_hidden_service_state_directory }}"

- name: Start tor hidden service
  service:
    name: tor-hidden-service
    enabled: true
    state: started

# Clone the vanguards repo for hardening the Tor hidden service
# See https://blog.torproject.org/announcing-vanguards-add-onion-services
# and https://github.com/mikeperry-tor/vanguards
# Installation instructions recommend doing this via git, as deb/rpm packages
# aren't as generally available yet (checking xenial proved fruitless for example,
# it looks like vanguards is only in ubuntu's apt repos for newer releases).
- name: Clone vanguards onion services add-on
  git:
    repo: "{{ tor_vanguards_repo_url }}"
    dest: "{{ tor_vanguards_addon_directory }}"
    # Keep a separate git directory to keep failed verifications/pulls/etc. from messing
    # up anything in the working tree. Just suffixed with .git in the same dir.
    separate_git_dir: "{{ tor_vanguards_addon_directory }}.git"

- name: Find latest vanguards add-on git tag
  command: git describe --abbrev=0
  args:
    chdir: "{{ tor_vanguards_addon_directory }}.git"
  register: tor_vanguard_git_tag

- name: Checkout latest git tag in vanguard repo
  command: "git checkout {{ tor_vanguard_git_tag.stdout }}"
  args:
    chdir: "{{ tor_vanguards_addon_directory }}"

# Tell git to use gpg2 when verifying tags/commits
- shell: "git config --global gpg.program $(which gpg2)"

# Grab the signing key.
- name: Grab Vanguards add-on PGP signing key
  command: "gpg2 {{ streisand_default_gpg_flags }} {{ streisand_default_key_import_flags}} --recv-keys {{ tor_vanguards_addon_gpg_key }}"

# Now, finally, we can run the gpg verify
# We tell git (or really, gpg) where Streisand's default keyring is located by using
# the env variable $GNUPGHOME. This way, when git makes a call to gpg2 it uses the right
# keyring and can find the public key associated with the tag/commit.
- name: Verify vanguard add-on git signature
  git:
    repo: "{{ tor_vanguards_repo_url }}"
    dest: "{{ tor_vanguards_addon_directory }}"
    version: "{{ tor_vanguard_git_tag.stdout }}"
    verify_commit: yes
  environment:
    GNUPGHOME: "{{ streisand_gpg_dir }}"
  register: tor_vanguard_git_verify_results

- name: Setup vanguards virtualenv/install
  command: "{{ tor_vanguards_addon_directory }}/setup.sh"
  args:
    chdir: "{{ tor_vanguards_addon_directory }}"

- name: Install cronjob to auto-update and verify vanguards
  template:
    src: "tor-vanguards-update-and-verify.sh.j2"
    dest: "/etc/cron.daily/tor-vanguards-update-and-verify.sh"
    owner: root
    group: root
    mode: 0755
  when: not streisand_ci

- name: Start the vanguards service
  service:
    name: vanguards
    enabled: true
    state: started

# TODO(@cpu) - This should be removed once it isn't required, maybe in the next
# release after tor 0.3.0.9
- name: Copy a local override for the Tor AppArmor profile in place
  copy:
    src: apparmor-local-override
    dest: /etc/apparmor.d/local/system_tor
    owner: root
    group: root
    mode: 0644

# TODO(@cpu) - In theory it seems like it should be possible to add the
# following to the local override from above:
#     /usr/bin/obfsproxy ix,
#     /usr/bin/obfs4proxy ix,
# but doing so results in an error from the existing `PUx` modifiers:
#     profile system_tor: has merged rule /usr/bin/obfs4proxy with conflicting x modifiers
# in the interest of fixing a regression we work around this by changing the
# dist provided `/etc/apparmor.d/abstractions/tor` file.
- name: Fix the distro Tor apparmor abstraction
  replace:
    path: /etc/apparmor.d/abstractions/tor
    regexp: '^([\s]*)/usr/bin/(obfs4?proxy) PUx,$'
    replace: '\1/usr/bin/\2 ix,'
    backup: yes

- name: Reload the system_tor AppArmor profile for the override to take effect
  command: apparmor_parser -r /etc/apparmor.d/system_tor

- name: Restart Tor so the server fingerprint will be available in the state file, and the hidden service for the Gateway will start running
  service:
    name: tor
    state: restarted

- name: Wait until obfs4proxy information has shown up in its state file
  wait_for:
    path: "{{ tor_obfs_state_directory }}/obfs4_state.json"
    search_regex: "node-id"

- name: Wait until the hidden service is online
  wait_for:
    path: "{{ tor_hidden_service_directory }}/hostname"

- name: Wait until the server fingerprint file is generated
  wait_for:
    path: "{{ tor_state_directory }}/fingerprint"

- name: Register the Tor Hidden Service hostname
  command: cat {{ tor_hidden_service_directory }}/hostname
  register: tor_hidden_service_hostname_output
  changed_when: False

- name: Register the Tor Hidden Service URL fact
  set_fact:
    tor_hidden_service_url: "http://{{ tor_hidden_service_hostname_output.stdout }}"

- name: Generate the hidden service virtual host and restart Nginx if it is updated
  template:
    src: hidden-service-vhost.j2
    dest: /etc/nginx/sites-available/streisand-hidden-service
    owner: root
    group: root
    mode: 0644
  notify: Restart Nginx for the Tor hidden service vhost

- name: Enable the virtual host
  file:
    path: /etc/nginx/sites-enabled/streisand-hidden-service
    src: /etc/nginx/sites-available/streisand-hidden-service
    state: link

- name: Discover the server fingerprint
  command: "awk '{ print $2 }' {{ tor_state_directory }}/fingerprint"
  register: tor_fingerprint

- name: Discover the obfs4 certificate details
  shell: cat "{{ tor_obfs_state_directory }}/obfs4_bridgeline.txt" | grep 'Bridge obfs4' | sed -e 's/^.*cert=\(.*\) .*$/\1/'
  register: tor_obfs4_certificate
  changed_when: False

# Generate the docs gateway page
- import_tasks: docs.yml

# This needs to be done after the docs folder structure is generated
- name: Copy the hidden service hostname to the webroot when in test client mode
  copy:
    src: "{{ tor_hidden_service_directory }}/hostname"
    remote_src: yes
    dest: "{{ tor_gateway_location }}/hidden-service-hostname.txt"
    force: yes

# Mirror the Tor browser bundle
- import_tasks: mirror.yml
