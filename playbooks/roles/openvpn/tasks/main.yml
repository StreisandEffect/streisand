---
# Add the apt key and install OpenVPN
- import_tasks: install.yml

- name: "Configure DNSMasq to listen on {{ dnsmasq_openvpn_tcp_ip }}:53 and {{ dnsmasq_openvpn_udp_ip }}:53"
  template:
    src: openvpn_dnsmasq.conf.j2
    dest: /etc/dnsmasq.d/openvpn.conf
  notify: Restart dnsmasq

- include_role:
    name: certificates
  vars:
    ca_path:            "{{ openvpn_path }}"
    tls_ca:             "{{ openvpn_ca }}"
    tls_client_path:    "{{ openvpn_path }}"
    generate_ca_server: yes
    generate_client:    yes
    tls_request_subject:         "{{ openvpn_request_subject }}"
    tls_server_common_name_file: "{{ openvpn_server_common_name_file }}"
    tls_sans:
      - "{{ streisand_ipv4_address }}"

- name: Register the OpenVPN server common name
  command: cat "{{ openvpn_server_common_name_file }}"
  register: openvpn_server_common_name
  changed_when: False

- name: Generate HMAC firewall key
  command: openvpn --genkey --secret {{ openvpn_hmac_firewall }}
  args:
    creates: "{{ openvpn_hmac_firewall }}"

- name: Register CA certificate contents
  command: cat ca.crt
  args:
    chdir: "{{ openvpn_path }}"
  register: openvpn_ca_contents
  changed_when: False

- name: Register client certificate contents
  command: cat client.crt
  args:
    chdir: "{{ openvpn_path }}/{{ client_name.stdout }}"
  with_items: "{{ vpn_client_names.results }}"
  loop_control:
    loop_var: "client_name"
    label: "{{ client_name.item }}"
  register: openvpn_client_certificates
  changed_when: False

- name: Register client key contents
  command: cat client.key
  args:
    chdir: "{{ openvpn_path }}/{{ client_name.stdout }}"
  with_items: "{{ vpn_client_names.results }}"
  loop_control:
    loop_var: "client_name"
    label: "{{ client_name.item }}"
  register: openvpn_client_keys
  changed_when: False

- name: Register HMAC firewall contents
  command: cat ta.key
  args:
    chdir: "{{ openvpn_path }}"
  register: openvpn_hmac_firewall_contents
  changed_when: False

- name: Create the client configuration profiles that will be used when connecting directly
  template:
    src: client-direct.ovpn.j2
    dest: "{{ openvpn_path }}/{{ item[0].stdout }}/{{ openvpn_direct_profile_filename }}"
  with_together:
    - "{{ vpn_client_names.results }}"
    - "{{ openvpn_client_certificates.results }}"
    - "{{ openvpn_client_keys.results }}"
  loop_control:
    label: "{{ item[0].item }}"

- name: Create the client configuration profiles that will be used when connecting directly via UDP
  template:
    src: client-direct-udp.ovpn.j2
    dest: "{{ openvpn_path }}/{{ item[0].stdout }}/{{ openvpn_direct_udp_profile_filename }}"
  with_together:
    - "{{ vpn_client_names.results }}"
    - "{{ openvpn_client_certificates.results }}"
    - "{{ openvpn_client_keys.results }}"
  loop_control:
    label: "{{ item[0].item }}"

- name: Create the client configuration profiles that will be used when connecting via sslh
  template:
    src: client-sslh.ovpn.j2
    dest: "{{ openvpn_path }}/{{ item[0].stdout }}/{{ openvpn_sslh_profile_filename }}"
  with_together:
    - "{{ vpn_client_names.results }}"
    - "{{ openvpn_client_certificates.results }}"
    - "{{ openvpn_client_keys.results }}"
  loop_control:
    label: "{{ item[0].item }}"

- name: Create the client configuration profiles that will be used when connecting via stunnel
  template:
    src: client-stunnel.ovpn.j2
    dest: "{{ openvpn_path }}/{{ item[0].stdout }}/{{ openvpn_stunnel_profile_filename }}"
  with_together:
    - "{{ vpn_client_names.results }}"
    - "{{ openvpn_client_certificates.results }}"
    - "{{ openvpn_client_keys.results }}"
  loop_control:
    label: "{{ item[0].item }}"
  when: streisand_stunnel_enabled

- name: Create the combined client configuration profiles that will be used to connect from the fastest to the most compatible
  template:
    src: client-combined.ovpn.j2
    dest: "{{ openvpn_path }}/{{ item[0].stdout }}/{{ openvpn_combined_profile_filename }}"
  with_together:
    - "{{ vpn_client_names.results }}"
    - "{{ openvpn_client_certificates.results }}"
    - "{{ openvpn_client_keys.results }}"
  loop_control:
    label: "{{ item[0].item }}"

- name: Copy OpenVPN configuration file into place
  template:
    src: etc_openvpn_server.conf.j2
    dest: "{{ openvpn_path }}/server.conf"

- name: Copy OpenVPN UDP configuration file into place
  template:
    src: etc_openvpn_server_udp.conf.j2
    dest: "{{ openvpn_path }}/server-udp.conf"

- name: Stop and disable the bundled openvpn.service
  systemd:
    name: openvpn.service
    state: stopped
    enabled: no

- name: Copy the OpenVPN system unit files
  template:
    src: openvpn.service.j2
    dest: /etc/systemd/system/{{ item }}
    mode: 0644
  with_items:
    - "{{ openvpn_service_names }}"

- name: Enable the OpenVPN services
  systemd:
    daemon_reload: yes
    name: "{{ item }}"
    enabled: yes
    state: restarted
  with_items:
    - "{{ openvpn_service_names }}"

- name: Copy the ca.crt and ta.key files that clients will need in order to connect to the OpenVPN server
  command: cp {{ openvpn_path }}/{{ item[1] }} {{ openvpn_path }}/{{ item[0].stdout }}
  with_nested:
    - "{{ vpn_client_names.results }}"
    - ["ca.crt", "ta.key"]
  loop_control:
    label: "{{ item[0].item }}"

# Set up the OpenVPN firewall rules
- import_tasks: firewall.yml

# Generate Gateway documentation
- import_tasks: docs.yml

# Mirror the OpenVPN clients
- import_tasks: mirror.yml

# Install stunnel
# NOTE (@alimakki) - must be done after OpenVPN's Gateway task
# since it depends on the OpenVPN gateway directory being present
- include_role:
    name: stunnel
  when: streisand_stunnel_enabled
