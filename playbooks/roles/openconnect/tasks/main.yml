---
# Download, compile and install ocserv and its dependencies
- import_tasks: install.yml

- name: Create ocserv's PAM control
  copy:
    src: ocserv-pam
    dest: /etc/pam.d/ocserv
    owner: root
    group: root
    mode: 0644

- name: Create the ocserv configuration directory
  file:
    path: "{{ ocserv_path }}"
    owner: root
    group: root
    mode: 0750
    state: directory

- include_role:
    name: certificates
  vars:
    ca_path:            "{{ ocserv_path }}"
    tls_ca:             "{{ ocserv_ca }}"
    tls_client_path:    "{{ ocserv_path }}"
    tls_key_ou:         "{{ ocserv_key_ou }}"
    vpn_name:           "ocserv"
    generate_ca_server: yes
    generate_client:    yes
    generate_pkcs:      yes
    tls_server_common_name_file: "{{ ocserv_server_common_name_file }}"
    tls_sans:
      - "{{ streisand_ipv4_address }}"

- name: Base64 encode the client PKCS12 file(s)
  command: "openssl base64 -in {{ ocserv_path }}/{{ client_name.stdout }}/{{ client_name.stdout }}.p12"
  register: ocserv_clients_base64
  changed_when: False
  with_items: "{{ vpn_client_names.results }}"
  loop_control:
    loop_var: "client_name"
    label: "{{ client_name.item }}"

- name: Generate a UUID for .mobileconfig client PKCS12 certificate
  command: uuid -v4
  register: ocserv_client_mobileconfig_uuid
  changed_when: False

- name: Generate a UUID for .mobileconfig vpn payload identifier
  command: uuid -v4
  register: ocserv_payload_mobileconfig_uuid
  changed_when: False

- name: Generate a UUID for .mobileconfig config payload identifier
  command: uuid -v4
  register: ocserv_config_mobileconfig_uuid
  changed_when: False

- name: Generate a UUID for .mobileconfig global identifier
  command: uuid -v4
  register: ocserv_global_mobileconfig_uuid
  changed_when: False

- name: Generate the iOS client mobileconfig file(s)
  template:
    src: client.mobileconfig.j2
    dest: "{{ ocserv_path }}/{{ client_content[0].stdout }}/{{ client_content[0].stdout }}.mobileconfig"
    owner: root
    group: root
    mode: 0600
  with_together:
    - "{{ vpn_client_names.results }}"
    - "{{ ocserv_clients_base64.results }}"
    - "{{ vpn_client_pkcs12_password_list.results }}"
  loop_control:
    loop_var: "client_content"
    label: "{{ client_content[0].item }}"

- name: Generate a random ocserv password
  shell: "{{ streisand_word_gen.psk | trim }} > {{ ocserv_password_file }}"
  args:
    creates: "{{ ocserv_password_file }}"

- name: Set permissions on the unhashed ocserv password file
  file:
    path: "{{ ocserv_password_file }}"
    owner: root
    group: root
    mode: 0600

- name: Register the ocserv password
  command: cat {{ ocserv_password_file }}
  register: ocserv_password
  changed_when: False

- name: Create an ocpasswd credentials file
  expect:
    command: ocpasswd -c {{ ocserv_hashed_password_file }} streisand
    responses:
      "Enter password": "{{ ocserv_password.stdout }}"
      "Re-enter password": "{{ ocserv_password.stdout }}"
    creates: "{{ ocserv_hashed_password_file }}"

- name: Generate the ocserv configuration file
  template:
    src: config.j2
    dest: "{{ ocserv_config_file }}"
    owner: root
    group: root
    mode: 0600

- name: Generate the ocserv systemd service file
  template:
    src: ocserv.service.j2
    dest: /etc/systemd/system/ocserv.service
    mode: 0644

- name: Stop and disable ocserv.socket
  systemd:
    name: ocserv.socket
    state: stopped
    enabled: no

- name: Enable the ocserv service
  systemd:
    daemon_reload: yes
    name: ocserv.service
    enabled: yes
    state: restarted

# Set up the openconnect firewall rules
- import_tasks: firewall.yml

# Generate Gateway documentation
- import_tasks: docs.yml

# Mirror the OpenConnect clients
- import_tasks: mirror.yml
