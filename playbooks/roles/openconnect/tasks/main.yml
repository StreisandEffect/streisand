---
# Download, compile and install ocserv and its dependencies
- import_tasks: install.yml

- name: Create the ocserv configuration directory
  file:
    path: "{{ ocserv_path }}"
    owner: root
    group: root
    mode: 0750
    state: directory

- name: Generate the ocserv init script
  template:
    src: ocserv-init.j2
    dest: /etc/init.d/ocserv
    owner: root
    group: root
    mode: 0755

- name: Enable the ocserv init script so the service will start at boot
  command: update-rc.d ocserv defaults
  args:
    creates: /etc/rc0.d/K20ocserv

- name: Generate the CA template file
  template:
    src: ca.tmpl.j2
    dest: "{{ ocserv_ca_template_file }}"
    owner: root
    group: root
    mode: 0600

- name: Generate the CA key
  command: certtool --generate-privkey --outfile {{ ocserv_ca_key_file }}
  args:
    creates: "{{ ocserv_ca_key_file }}"

- name: Generate the self-signed CA certificate
  command: certtool --generate-self-signed --load-privkey {{ ocserv_ca_key_file }} --template {{ ocserv_ca_template_file }} --outfile {{ ocserv_ca_certificate_file }}
  args:
    creates: "{{ ocserv_ca_certificate_file }}"

- name: Generate the server template file
  template:
    src: server.tmpl.j2
    dest: "{{ ocserv_server_template_file }}"
    owner: root
    group: root
    mode: 0600

- name: Generate the server key
  command: certtool --generate-privkey --outfile {{ ocserv_server_key_file }}
  args:
    creates: "{{ ocserv_server_key_file }}"

- name: Generate the server certificate
  command: certtool --generate-certificate --load-privkey {{ ocserv_server_key_file }} --load-ca-certificate {{ ocserv_ca_certificate_file }} --load-ca-privkey {{ ocserv_ca_key_file }} --template {{ ocserv_server_template_file }} --outfile {{ ocserv_server_certificate_file }}
  args:
    creates: "{{ ocserv_server_certificate_file }}"

- name: Generate the client template file
  template:
    src: client.tmpl.j2
    dest: "{{ ocserv_path }}/client-{{ client_name.stdout }}.tmpl"
    owner: root
    group: root
    mode: 0600
  with_items: "{{ vpn_client_names.results }}"
  loop_control:
    loop_var: "client_name"
    label: "{{ client_name.item }}"

- name: Generate the client keys
  command: certtool --generate-privkey --outfile {{ ocserv_path }}/{{ client_name.stdout }}-key.pem
  args:
    creates: "{{ ocserv_path }}/{{ client_name.stdout }}-key.pem"
  with_items: "{{ vpn_client_names.results }}"
  loop_control:
    loop_var: "client_name"
    label: "{{ client_name.item }}"

- name: Generate the client certificates
  command: certtool --generate-certificate --load-privkey {{ ocserv_path }}/{{ client_name.stdout }}-key.pem --load-ca-certificate {{ ocserv_ca_certificate_file }} --load-ca-privkey {{ ocserv_ca_key_file }} --template {{ ocserv_path }}/client-{{ client_name.stdout }}.tmpl --outfile {{ ocserv_path }}/{{ client_name.stdout }}-cert.pem
  args:
    creates: "{{ ocserv_path }}/{{ client_name.stdout }}-cert.pem"
  with_items: "{{ vpn_client_names.results }}"
  loop_control:
    loop_var: "client_name"
    label: "{{ client_name.item }}"

- name: "Generate a random password that will be used during the PKCS #12 conversion"
  shell: grep -v -P "[\x80-\xFF]" /usr/share/dict/american-english-huge | sed -e "s/'//" | shuf -n 2 | xargs | sed -e 's/ /-/g' > {{ ocserv_path }}/ocserv-{{ client_name.stdout }}-pkcs12-password
  args:
    creates: "{{ ocserv_path }}/ocserv-{{ client_name.stdout }}-pkcs12-password"
  with_items: "{{ vpn_client_names.results }}"
  loop_control:
    loop_var: "client_name"
    label: "{{ client_name.item }}"

- name: "Set permissions on the PKCS #12 password file"
  file:
    path: "{{ ocserv_path }}/ocserv-{{ client_name.stdout }}-pkcs12-password"
    owner: root
    group: root
    mode: 0600
  with_items: "{{ vpn_client_names.results }}"
  loop_control:
    loop_var: "client_name"
    label: "{{ client_name.item }}"

- name: "Register the PKCS #12 passwords"
  command: cat {{ ocserv_path }}/ocserv-{{ client_name.stdout }}-pkcs12-password
  register: "ocserv_client_pkcs12_password_list"
  with_items: "{{ vpn_client_names.results }}"
  loop_control:
    loop_var: "client_name"
    label: "{{ client_name.item }}"
  changed_when: False

- name: "Convert the keys and certificates into PKCS #12 format"
  expect:
    command: certtool --to-p12 --load-privkey {{ ocserv_path }}/{{ ocserv_client_password.client_name.stdout }}-key.pem --pkcs-cipher 3des-pkcs12 --load-certificate {{ ocserv_path }}/{{ ocserv_client_password.client_name.stdout }}-cert.pem --outfile {{ ocserv_path }}/{{ ocserv_client_password.client_name.stdout }}.p12 --outder
    responses:
      "Enter a name for the key": "{{ ocserv_client_password.client_name.stdout }}"
      "Enter password":   "{{ ocserv_client_password.stdout }}"
      "Confirm password": "{{ ocserv_client_password.stdout }}"
    creates: "{{ ocserv_path }}/{{ ocserv_client_password.client_name.stdout }}.p12"
  with_items: "{{ ocserv_client_pkcs12_password_list.results }}"
  loop_control:
    loop_var: "ocserv_client_password"
    label: "{{ ocserv_client_password.client_name.item }}"

- name: Generate a random ocserv password
  shell: grep -v -P "[\x80-\xFF]" /usr/share/dict/american-english-huge | sed -e "s/'//" | shuf -n 4 | xargs | sed -e 's/ /-/g' > {{ ocserv_password_file }}
  args:
    creates: "{{ ocserv_password_file }}"

- name: Set permissions on the unhashed ocserv password file
  file:
    path: "{{ ocserv_password_file }}"
    owner: root
    group: root
    mode: 0600

- name: Register the ocserv password
  command: cat {{ ocserv_password_file }}
  register: ocserv_password
  changed_when: False

- name: Create an ocpasswd credentials file
  expect:
    command: ocpasswd -c {{ ocserv_hashed_password_file }} streisand
    responses:
      "Enter password": "{{ ocserv_password.stdout }}"
      "Re-enter password": "{{ ocserv_password.stdout }}"
    creates: "{{ ocserv_hashed_password_file }}"

- name: Generate the ocserv configuration file
  template:
    src: config.j2
    dest: "{{ ocserv_config_file }}"
    owner: root
    group: root
    mode: 0600
  notify: Restart ocserv

# Set up the openconnect firewall rules
- import_tasks: firewall.yml

# Generate Gateway documentation
- import_tasks: docs.yml

# Mirror the OpenConnect clients
- import_tasks: mirror.yml
