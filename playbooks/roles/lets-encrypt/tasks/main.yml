- import_tasks: install.yml

- name: Prepare response file directory
  file:
    path: "{{ le_base }}/conf"
    state: directory
    recurse: yes

- name: Query Let's Encrypt to find the current subscriber agreement URL
  uri:
    url: "{{ le_api_endpoint }}"
    body_format: json
  register: http_body

- name: Extract Let's Encrypt subscriber agreement URL
  set_fact:
    le_agreements: "{{ http_body['json']['meta']['terms-of-service'] }}"

- name: Put reponse file in place
  template:
    src: response.yaml.j2
    dest: "{{ le_base }}/conf/responses"

- name: Perform initial configuration of acmetool
  command: acmetool quickstart
  args:
    creates: "{{ le_base }}/conf/target"

# acmetool should now run in redirector mode listening on 80/tcp for HTTP
# requests (including ACME chanllenges). All HTTP requests are simply
# redirected to their HTTPS counterparts.

- import_tasks: firewall.yml

# Now we try to request a certificate. If it fails. We print a warning and
# fall back to self-signed certificates.
- block:
    - name: Request initial certificate from Let's Encrypt
      command: "acmetool want {{ streisand_domain }}"
      args:
        creates: "{{ le_certificate }}"

    - set_fact:
        le_ok: True

  rescue:
    - set_fact:
        le_ok: False

    - name: Failed to get Let's Encrypt certificates. We are falling back to use self-signed ones. You could re-run the playbook to try again.
      pause:
        seconds: 10
