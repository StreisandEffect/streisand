---
- name: Make the necessary directories for the certificate authority
  file:
    path: "{{ item }}"
    owner: root
    group: root
    mode: 0750
    state: directory
  with_items:
    - "{{ openssl_ca_base }}"
    - "{{ openssl_ca_private_dir }}"
    - "{{ openssl_ca_newcerts_dir }}"

- name: Create a certificate authority key and certificate
  command: openssl req -new -nodes -x509 -days {{ nginx_days_valid }} -extensions v3_ca -newkey rsa:{{ streisand_gateway_rsa_key_size }} -keyout {{ openssl_ca_key }} -out {{ openssl_ca_certificate }} -subj "/C={{ nginx_key_country }}/ST={{ nginx_key_province }}/L={{ nginx_key_city }}/O={{ nginx_key_org }}/OU={{ nginx_key_ou }}"
  args:
    creates: "{{ openssl_ca_certificate }}"

- name: Create the certificate request
  command: openssl req -new -nodes -days {{ nginx_days_valid }} -newkey rsa:{{ streisand_gateway_rsa_key_size }} -keyout {{ nginx_private_key }} -out {{ nginx_self_signed_certificate_request }} -subj "/C={{ nginx_key_country }}/ST={{ nginx_key_province }}/L={{ nginx_key_city }}/O={{ nginx_key_org }}/OU={{ nginx_key_ou }}/CN={{ streisand_ipv4_address }}"
  args:
    creates: "{{ nginx_self_signed_certificate_request }}"

- name: Seed a blank database file that will be used when generating the self-signed certificate
  file:
    path: "{{ openssl_ca_base }}/index.txt"
    state: touch

- name: Change where OpenSSL looks for CA material
  lineinfile:
    dest: /usr/lib/ssl/openssl.cnf
    regexp: "Where everything is kept"
    line: "dir             = {{ openssl_ca_base }}"

- name: Generate the self-signed SSL certificate
  command: openssl ca -batch -create_serial -days {{ nginx_days_valid }} -in {{ nginx_self_signed_certificate_request }} -out {{ nginx_self_signed_certificate }}
  args:
    creates: "{{ nginx_self_signed_certificate }}"

- name: Remove the CA private key. It has signed its first and last certificate.
  file:
    path: "{{ openssl_ca_key }}"
    state: absent

- name: Generate a random Gateway password
  shell: grep -v -P "[\x80-\xFF]" /usr/share/dict/american-english-huge | sed -e "s/'//" | shuf -n 4 | xargs | sed -e 's/ /-/g' > {{ streisand_gateway_password_file }}
  args:
    creates: "{{ streisand_gateway_password_file }}"

- name: Register the Gateway password
  command: cat {{ streisand_gateway_password_file }}
  register: streisand_gateway_password

- name: Install the required package for the htpasswd command
  apt:
    name: apache2-utils

- name: Generate the htpasswd file
  command: htpasswd -b -c {{ streisand_gateway_htpasswd_file }} {{ streisand_gateway_username }} {{ streisand_gateway_password.stdout }}
  args:
    creates: "{{ streisand_gateway_htpasswd_file }}"

- name: Set permissions on the SSL private key and the unhashed Gateway password file
  file:
    path: "{{ item }}"
    owner: root
    group: root
    mode: 0640
  with_items:
    - "{{ nginx_private_key }}"
    - "{{ streisand_gateway_password_file }}"

- name: Copy the Streisand gateway password file locally
  fetch:
    src: "{{ streisand_gateway_password_file }}"
    dest: "{{ streisand_gateway_password_localpath }}"
    fail_on_missing: yes
    flat: yes
  when: streisand_client_test

- name: Register MITM mitigation fact (certificate serial number)
  command: openssl x509 -in {{ nginx_self_signed_certificate }} -noout -serial
  register: ssl_certificate_serial_number

- name: Register more MITM mitigation facts (fingerprints)
  command: openssl x509 -{{ item }} -in {{ nginx_self_signed_certificate }} -noout -fingerprint
  with_items:
    - sha256
    - sha1
    - md5
  register: ssl_certificate_fingerprints

- name: Generate the virtual host and restart Nginx if it is updated
  template:
    src: vhost.j2
    dest: /etc/nginx/sites-available/streisand
    owner: root
    group: root
    mode: 0644
  notify: Restart Nginx for the Gateway vhost

- name: Enable the virtual host
  file:
    path: /etc/nginx/sites-enabled/streisand
    src: /etc/nginx/sites-available/streisand
    state: link

- name: Convert the CA certificate into the right format for a data uri
  command: base64 --wrap=0 {{ openssl_ca_certificate }}
  register: streisand_certificate_data_uri

  # TODO:
  #   Add to CI testing https://github.com/jlund/streisand/issues/643
- block:
    - name: Generate the Markdown Gateway index information
      template:
        src: "index{{ item.value.file_suffix }}.md.j2"
        dest: "{{ streisand_gateway_location }}/index{{ item.value.file_suffix }}.md"
      with_dict: "{{ streisand_languages }}"

    - name: Generate the Markdown Gateway instructions
      template:
        src: "instructions{{ item.value.file_suffix }}.md.j2"
        dest: "/tmp/{{ streisand_server_name }}{{ item.value.file_suffix }}.md"
      with_dict: "{{ streisand_languages }}"

    - name: Generate the Markdown Gateway firewall instructions
      template:
        src: "firewall{{ item.value.file_suffix }}.md.j2"
        dest: "/tmp/{{ streisand_server_name }}-firewall-information{{ item.value.file_suffix }}.md"
      with_dict: "{{ streisand_languages }}"

    - name: Convert the Markdown Gateway index instructions
      shell: markdown {{ streisand_gateway_location }}/index{{ item.value.file_suffix }}.md | cat {{ streisand_header_template }} - {{ streisand_footer_template }} > {{ streisand_gateway_location }}/index{{ item.value.file_suffix }}.html
      with_dict: "{{ streisand_languages }}"

    - name: Convert the Markdown Gateway instructions
      shell: markdown /tmp/{{ streisand_server_name }}{{ item.value.file_suffix }}.md | cat {{ streisand_header_template }} - {{ streisand_footer_template }} > /tmp/{{ streisand_server_name }}{{ item.value.file_suffix }}.html
      with_dict: "{{ streisand_languages }}"

    - name: Convert the Markdown Gateway firewall instructions
      shell: markdown /tmp/{{ streisand_server_name }}-firewall-information{{ item.value.file_suffix }}.md | cat {{ streisand_header_template }} - {{ streisand_footer_template }} > /tmp/{{ streisand_server_name }}-firewall-information{{ item.value.file_suffix }}.html
      with_dict: "{{ streisand_languages }}"

    - name: Fetch the Gateway HTML instructions information
      fetch:
        dest: ../{{ streisand_local_directory }}/
        src: "/tmp/{{ streisand_server_name }}{{ item.value.file_suffix }}.html"
        flat: yes
      with_dict: "{{ streisand_languages }}"

    - name: Fetch the Gateway HTML firewall information
      fetch:
        dest: ../{{ streisand_local_directory }}/
        src: "/tmp/{{ streisand_server_name }}-firewall-information{{ item.value.file_suffix }}.html"
        flat: yes
      with_dict: "{{ streisand_languages }}"

    - name: Clean up the temporary Gateway instruction information file once it has been retrieved
      file:
        path: "/tmp/{{ streisand_server_name }}{{ item.value.file_suffix }}.html"
        state: absent
      with_dict: "{{ streisand_languages }}"

    - name: Clean up the temporary Gateway markdown instruction information file once it has been retrieved
      file:
        path: "/tmp/{{ streisand_server_name }}{{ item.value.file_suffix }}.md"
        state: absent
      with_dict: "{{ streisand_languages }}"

    - name: Clean up the temporary Gateway firewall information file once it has been retrieved
      file:
        path: "/tmp/{{ streisand_server_name }}-firewall-information{{ item.value.file_suffix }}.html"
        state: absent
      with_dict: "{{ streisand_languages }}"

    - name: Clean up the temporary Gateway markdown firewall information file once it has been retrieved
      file:
        path: "/tmp/{{ streisand_server_name }}-firewall-information{{ item.value.file_suffix }}.md"
        state: absent
      with_dict: "{{ streisand_languages }}"

    - name: Ensure that all of the files in the Gateway have the proper permissions
      file:
        path: "{{ streisand_gateway_location }}"
        owner: www-data
        group: www-data
        mode: 0750
        state: directory
        recurse: yes

    - meta: flush_handlers

    - block:
        - name: Success!
          pause:
            prompt: "Server setup is complete. The `{{ streisand_server_name }}.html` instructions file in the generated-docs folder is ready to give to friends, family members, and fellow activists. Press Enter to continue."

        - name: Attempt to open the instructions on Linux (if applicable). Errors in this task are ignored because the `xdg-open` command is not always available.
          local_action: command xdg-open ../{{ streisand_local_directory }}/{{ streisand_server_name }}.html
          ignore_errors: yes
          when: hostvars['127.0.0.1']['ansible_system'] == "Linux"
          become: no

        - name: Open the instructions on OS X (if applicable)
          local_action: command open ../{{ streisand_local_directory }}/{{ streisand_server_name }}.html
          when: hostvars['127.0.0.1']['ansible_system'] == "Darwin"
          become: no
      when: not streisand_noninteractive
  when: not streisand_ci
