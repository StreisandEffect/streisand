---
- name: Install stunnel
  apt:
    package: stunnel4

- name: Generate the stunnel private key
  command: openssl genrsa -out {{ stunnel_key }} {{ stunnel_key_size }}
  args:
    creates: "{{ stunnel_key }}"

- name: Generate the stunnel certificate.
  shell: openssl req -new -nodes -x509 -key {{ stunnel_key}} -days {{ stunnel_days_valid }} -subj "{{ stunnel_request_subject }}/CN=stunnel" > {{ stunnel_cert }}
  args:
    creates: "{{ stunnel_cert }}"

- name: "Export the key and certificate file in PKCS #12 format"
  command: "openssl pkcs12 -export -in {{ stunnel_cert }} -inkey {{ stunnel_key }} -out {{ stunnel_pkcs12 }} -password pass:"
  args:
    creates: "{{ stunnel_pkcs12 }}"

- name: Set the proper permissions on the stunnel key file
  file:
    path: "{{ stunnel_key }}"
    owner: root
    group: root
    mode: 0600

- name: Generate remote stunnel configuration file (for the server)
  template:
    src: stunnel-remote.conf.j2
    dest: "{{ stunnel_path }}/stunnel.conf"
  notify: Restart stunnel

- name: Generate local stunnel configuration file (for connecting clients)
  template:
    src: stunnel-local.conf.j2
    dest: "{{ openvpn_gateway_location }}/stunnel.conf"

- name: Stop (init.d's) stunnel4
  systemd:
    name: stunnel4.service
    state: stopped

- name: Remove the stunnel init.d script
  file:
    state: absent
    path: "/etc/init.d/stunnel4"

- name: Copy the stunnel system unit file
  template:
    src: stunnel.service.j2
    dest: /etc/systemd/system/stunnel.service
    mode: "0644"

- name: Enable the stunnel service
  systemd:
    daemon_reload: yes
    name: stunnel.service
    enabled: yes
    state: restarted

# Set up the stunnel firewall rules
- import_tasks: firewall.yml

# Mirror the stunnel client
- import_tasks: mirror.yml
