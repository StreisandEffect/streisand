---
- name: Apply the sysctl value to enable TCP Fast Open
  sysctl:
    name: net.ipv4.tcp_fastopen
    value: 3
    state: present
  when: ansible_virtualization_type != 'lxc'

- name: Install the shadowsocks-libev dependencies
  apt:
    name: "{{ item }}"
    install_recommends: no
  with_items: "{{ shadowsocks_dependencies }}"

- name: Clone the shadowsocks-libev source code at tag {{ shadowsocks_version }}
  git:
    repo: "https://github.com/shadowsocks/shadowsocks-libev.git"
    dest: "{{ shadowsocks_compilation_directory }}"
    version: "v{{shadowsocks_version}}"

- name: Update the shadowsocks-libev source code submodules
  command: git submodule update --init --recursive
  args:
    chdir: "{{ shadowsocks_compilation_directory }}"
    # if one of the submodules (libbloom) has been populated we assume all of
    # the submodules were updated.
    creates: "{{ shadowsocks_compilation_directory }}/libbloom/Makefile.am"

- name: Autogen shadowsocks-libev {{ shadowsocks_version }} source
  command: ./autogen.sh
  args:
    chdir: "{{ shadowsocks_compilation_directory }}"
    creates: "{{ shadowsocks_compilation_directory }}/configure"

- name: Configure shadowsocks-libev {{ shadowsocks_version }} source
  command: ./configure {{ shadowsocks_configure_flags }}
  args:
    chdir: "{{ shadowsocks_compilation_directory }}"
    creates: "{{ shadowsocks_compilation_directory }}/Makefile"

- name: Compile shadowsocks-libev {{ shadowsocks_version }} source
  command: make -j{{ ansible_processor_cores }}
  args:
    chdir: "{{ shadowsocks_compilation_directory }}"
    creates: "{{ shadowsocks_compilation_directory }}/src/ss-server"

- name: Install shadowsocks-libev {{ shadowsocks_version }} binaries
  command: make install
  args:
    chdir: "{{ shadowsocks_compilation_directory }}"
    creates: "/usr/local/bin/ss-server"

- name: Create the shadowsocks-libev config directory
  file:
    path: "{{ shadowsocks_location }}"
    owner: root
    # The nobody user in nogroup needs to be able to read the config file
    group: nogroup
    # It is safe to make this directory world read only because the password
    # file and config file are not
    mode: 0755
    state: directory

- name: Copy the shadowsocks-libev systemd service in place
  copy:
    src: "{{ shadowsocks_compilation_directory }}/debian/shadowsocks-libev.service"
    dest: "/lib/systemd/system/shadowsocks-libev.service"
    # Using remote_src=true since we are copying files from the remote host to
    # another place on the remote host. NOTE: requires Ansible 2.0+
    remote_src: true
    mode: 0644

- name: Populate the shadowsocks-libev systemd defaults
  template:
    src: shadowsocks-libev.default.j2
    dest: "/etc/default/shadowsocks-libev"
    mode: 0644

- name: Generate a random Shadowsocks password
  shell: openssl rand -base64 48 > {{ shadowsocks_password_file }}
  args:
    creates: "{{ shadowsocks_password_file }}"

- name: Set permissions on the Shadowsocks password file
  file:
    path: "{{ shadowsocks_password_file }}"
    owner: root
    group: root
    mode: 0600

- name: Register Shadowsocks password
  command: cat {{ shadowsocks_password_file }}
  register: shadowsocks_password

# Add simple-obfs task file
- include: simple-obfs.yml

- name: Generate Shadowsocks config file
  template:
    src: config.json.j2
    dest: "{{ shadowsocks_location }}/config.json"
    # The nobody user in nogroup needs to be able to read the config file
    group: nogroup
    mode: 0640

- name: Enable the Shadowsocks service so it starts at boot, and bring it up
  systemd:
    name: shadowsocks-libev
    enabled: yes
    state: started

# For some providers (e.g. GCE/AWS) the streisand_ipv4_address != the
# ansible_default_ipv4.address, and the Shadowsocks service is bound to the
# latter instead of the former. We check both, tolerating errors checking the
# former. This mess should probably be addressed in a more forward facing
# manner.
- block:
    - name: "Check that the Shadowsocks service started ({{ streisand_ipv4_address }})"
      wait_for:
        host: "{{ streisand_ipv4_address }}"
        port: "{{ shadowsocks_server_port }}"
        state: started
        timeout: 30
      ignore_errors: yes
  rescue:
    - name: "Check that the Shadowsocks service started ({{ ansible_default_ipv4.address }})"
      wait_for:
        host: "{{ ansible_default_ipv4.address }}"
        port: "{{ shadowsocks_server_port }}"
        state: started
        timeout: 30

# Apply the Shadowsocks firewall rules
- include: firewall.yml

# Generate the Shadowsocks gateway docs & client QR code
- include: docs.yml

# Mirror the Shadowsocks clients
- include: mirror.yml

