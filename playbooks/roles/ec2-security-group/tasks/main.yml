---
- name: Create the EC2 security group
  ec2_group:
    name: "{{ aws_security_group }}"
    description: Security group for Streisand
    region: "{{ aws_region }}"
    vpc_id: "{{ aws_vpc_id | default(omit) }}"
    aws_access_key: "{{ aws_access_key }}"
    aws_secret_key: "{{ aws_secret_key }}"

- name: Pause for fifteen seconds to ensure the EC2 security group has been created
  pause:
    seconds: 15

- name: Open all of the necessary ports across every service in the EC2 security group
  ec2_group:
    name: "{{ aws_security_group }}"
    description: Security group for Streisand
    region: "{{ aws_region }}"
    vpc_id: "{{ aws_vpc_id | default(omit) }}"
    aws_access_key: "{{ aws_access_key }}"
    aws_secret_key: "{{ aws_secret_key }}"
    rules:
      # Nginx
      # ---
      - proto: tcp
        from_port: "{{ nginx_port }}"
        to_port: "{{ nginx_port }}"
        cidr_ip: 0.0.0.0/0
      # L2TP/IPsec
      # ---
      - proto: udp
        from_port: "500"
        to_port: "500"
        cidr_ip: 0.0.0.0/0
      - proto: udp
        from_port: "4500"
        to_port: "4500"
        cidr_ip: 0.0.0.0/0
      - proto: udp
        from_port: "1701"
        to_port: "1701"
        cidr_ip: 0.0.0.0/0
      # OpenConnect (ocserv)
      # ---
      - proto: tcp
        from_port: "{{ ocserv_port }}"
        to_port: "{{ ocserv_port }}"
        cidr_ip: 0.0.0.0/0
      - proto: udp
        from_port: "{{ ocserv_port }}"
        to_port: "{{ ocserv_port }}"
        cidr_ip: 0.0.0.0/0
      # OpenVPN
      # ---
      - proto: tcp
        from_port: "{{ openvpn_port }}"
        to_port: "{{ openvpn_port }}"
        cidr_ip: 0.0.0.0/0
      - proto: udp
        from_port: "{{ openvpn_port_udp }}"
        to_port: "{{ openvpn_port_udp }}"
        cidr_ip: 0.0.0.0/0
      # SSH
      # ---
      - proto: tcp
        from_port: "{{ ssh_port }}"
        to_port: "{{ ssh_port }}"
        cidr_ip: 0.0.0.0/0
      # Stunnel
      # ---
      - proto: tcp
        from_port: "{{ stunnel_remote_port }}"
        to_port: "{{ stunnel_remote_port }}"
        cidr_ip: 0.0.0.0/0
      # Tor
      # ---
      - proto: tcp
        from_port: "{{ tor_orport }}"
        to_port: "{{ tor_orport }}"
        cidr_ip: 0.0.0.0/0
      # Tor obfs4 port
      # ---
      - proto: tcp
        from_port: "{{ tor_obfs4_port }}"
        to_port: "{{ tor_obfs4_port }}"
        cidr_ip: 0.0.0.0/0
    rules_egress:
      - proto: all
        from_port: 1
        to_port: 65535
        cidr_ip: 0.0.0.0/0

# Shadowsocks
# ---
- name: Open the Shadowsocks ports in the EC2 security group
  ec2_group:
    name: "{{ aws_security_group }}"
    description: Security group for Streisand
    region: "{{ aws_region }}"
    vpc_id: "{{ aws_vpc_id | default(omit) }}"
    aws_access_key: "{{ aws_access_key }}"
    aws_secret_key: "{{ aws_secret_key }}"
    rules:
      # Shadowsocks TCP
      # ---
      - proto: tcp
        from_port: "{{ shadowsocks_server_port }}"
        to_port: "{{ shadowsocks_server_port }}"
        cidr_ip: 0.0.0.0/0
      # Shadowsocks UDP
      # ---
      - proto: udp
        from_port: "{{ shadowsocks_server_port }}"
        to_port: "{{ shadowsocks_server_port }}"
        cidr_ip: 0.0.0.0/0
  when: streisand_shadowsocks_enabled

# WireGuard
# ---
- name: Open the WireGuard ports in the EC2 security group
  ec2_group:
    name: "{{ aws_security_group }}"
    description: Security group for Streisand
    region: "{{ aws_region }}"
    vpc_id: "{{ aws_vpc_id | default(omit) }}"
    aws_access_key: "{{ aws_access_key }}"
    aws_secret_key: "{{ aws_secret_key }}"
    rules:
      - proto: udp
        from_port: "{{ wireguard_port }}"
        to_port: "{{ wireguard_port }}"
        cidr_ip: 0.0.0.0/0
  when: streisand_wireguard_enabled
