{% include "languages.md.j2" %}

SSH Tunnel
----------

---
* Platforms
  * [Windows](#windows)
  * [Linux and macOS](#linux-and-macos)
{% if streisand_tinyproxy_enabled %}
  * [Android](#android)
{% endif %}
  * [Notes](#notes)

<a name="windows"></a>
### Windows ###
1. Download [PuTTY](/mirror/ssh/) and run it.
1. Go to the *Session* section.
1. Enter `{{ streisand_ipv4_address }}` in the Host Name field.
1. Enter `443` in the Port field.
   * Port {{ ssh_port }} is available as an option if your network does not block it.
1. Go to Connection --> Data.
1. Enter `forward` in the *Auto-login username* field.
1. Go to Connection --> SSH.
1. Check `Don't start a shell or command at all`.
1. Go to Connection --> SSH --> Tunnels.
1. Enter `{{ ssh_default_socks_port }}` in the *Source port* field.
1. Make sure the `Auto` and `Dynamic` radio buttons are selected.
1. Click *Add* to add the tunnel. You should see `D{{ ssh_default_socks_port }}` in the Forwarded ports box.
1. Go to Connection --> SSH --> Auth.
1. Download the `streisand_rsa.ppk` private key that is used to authenticate the SSH connection. Right-click; Save target as...
   * [streisand\_rsa.ppk](/ssh/streisand_rsa.ppk)
1. Click the *Browse* button.
1. Click the *PuTTY Private Key Files* drop down next to the *File name* field and choose *All Files*.
1. Select the downloaded `streisand_rsa.ppk` file and click *Open*.
1. Go back to *Session* (the very first item in the left-hand menu).
1. Enter `{{ streisand_server_name }}` in the first *Saved Sessions* box and click the *Save* button. The next time you launch PuTTY you can choose the session and click *Load* to restore all of these settings.
1. Click *Open* to connect! PuTTY will ask you to confirm the fingerprint. Make sure it matches one of these:

   `{{ ssh_server_fingerprints.results[0].stdout }}`

   `{{ ssh_server_fingerprints.results[1].stdout }}`


You are now connected and have a SOCKS proxy up and running that is ready to forward encrypted traffic through SSH. The next step is to configure your web browser to use it.

#### Configuring Firefox to connect through a SOCKS proxy ####
1. Click the *Menu* button next to the *Home* icon to the right of the address bar.
1. Click *Options*.
1. Click the *Advanced* icon.
1. Go to the *Network* tab.
1. Click the *Settings* button to *Configure how Firefox connects to the Internet*.
1. Choose *Manual proxy configuration*.
1. Enter `127.0.0.1` and Port `{{ ssh_default_socks_port }}` on the *SOCKS Host* line.
1. Select *Remote DNS*. This configures Firefox to send all DNS requests through the SOCKS proxy. This will protect you against DNS poisoning and ensure that false DNS entries cannot be used to censor your access.
1. Click *OK*.
1. Click *OK* again to close the Firefox preferences window.
1. You should be good to go! You can verify that your traffic is being routed properly by [looking up your IP address on DuckDuckGo]({{ streisand_my_ip_url }}). It should say *Your public IP address is {{ streisand_ipv4_address }}*.

<a name="linux-and-macos"></a>
### Linux and macOS ###

#### SSH Forwarding ####

1. Download the `streisand_rsa` private key that is used to authenticate the SSH connection:
   * [streisand\_rsa](/ssh/streisand_rsa)
1. Copy the `streisand_rsa` file to the directory of your choice.
1. Set the correct permissions on the RSA key file:
   * `chmod 600 streisand_rsa`
1. Add a new entry to your `.ssh/config` file. It should look like this. Port {{ ssh_port }} is available if your network does not block it. Be sure to adjust the location of the IdentityFile:

         Host {{ streisand_server_name }}
           User           forward
           Port           443
           HostName       {{ streisand_ipv4_address }}
           IdentitiesOnly yes
           IdentityFile   ~/.ssh/streisand_rsa

1. SSH into the server and forward a dynamic SOCKS port:

   `ssh -vND {{ ssh_default_socks_port }} forward@{{ streisand_server_name }}`
1. Verify that the fingerprint matches one of these:

   `{{ ssh_server_fingerprints.results[0].stdout }}`

   `{{ ssh_server_fingerprints.results[1].stdout }}`
1. You are now connected and have a SOCKS proxy up and running that is ready to forward encrypted traffic through SSH. The next step is to configure your web browser to use it. You can follow the same instructions contained in the Windows section above to configure Firefox to route its traffic through the SOCKS proxy.

{% if streisand_sshuttle_enabled %}
#### sshuttle

Sshuttle is a simple VPN tunnelling solution that operates over the SSH transport. It's fast, easy to set up, and offers great performance.

1. Download the `streisand_rsa` private key that is used to authenticate the SSH connection:
   * [streisand\_rsa](/ssh/streisand_rsa)
1. Copy the `streisand_rsa` file to the directory of your choice.
1. Set the correct permissions on the RSA key file:
   * `chmod 600 streisand_rsa`
1. Add a new entry to your `.ssh/config` file. It should look like this. Port {{ ssh_port }} is available if your network does not block it. Be sure to adjust the location of the IdentityFile:

         Host {{ streisand_server_name }}
           User           sshuttle
           Port           443
           HostName       {{ streisand_ipv4_address }}
           IdentitiesOnly yes
           IdentityFile   ~/.ssh/streisand_rsa

1. Download [sshuttle](https://github.com/sshuttle/sshuttle) by running the following command in the directory of your choice:

  `git clone https://github.com/sshuttle/sshuttle.git`

  * If access to GitHub has been blocked, you can download a mirrored copy [here](/mirror/ssh/)!
  * sshuttle is also available via [Homebrew](http://brew.sh/) for OS X users: `brew install sshuttle`

1. Enter the directory:

   `cd sshuttle`
1. Run sshuttle and connect to the server:

   `./run --dns -r sshuttle@{{ streisand_server_name }} 0/0 -vv`
1. Verify that the fingerprint matches one of these:

   `{{ ssh_server_fingerprints.results[0].stdout }}`

   `{{ ssh_server_fingerprints.results[1].stdout }}`
1. All of your traffic, including DNS, is now being transparently forwarded through an encrypted SSH connection. You can verify that your traffic is being routed properly by [looking up your IP address on DuckDuckGo]({{ streisand_my_ip_url }}). It should say *Your public IP address is {{ streisand_ipv4_address }}*.

{% endif %}

{% if streisand_tinyproxy_enabled %}
<a name="android"></a>
### Android ###
1. Install [SSH persistent tunnels](https://play.google.com/store/apps/details?id=org.ayal.SPT) by Shai Ayal. This application makes it easy to forward multiple ports through an SSH tunnel, and it does a decent job of ensuring that the tunnels remain active even when you switch back and forth regularly between LTE, 3G, and WiFi. The app is [open source](https://code.google.com/p/ssh-persistent-tunnel/) and can be compiled for free, but the Play Store version costs $1.50.
1. Download the `streisand_rsa` private key that is used to authenticate the SSH connection:
   * [streisand\_rsa](/ssh/streisand_rsa)
1. Copy the `streisand_rsa` file to the root directory of your phone.
1. Start the application. It will be listed as *SPT* in your launcher, and its icon looks like a train tunnel.
1. Tap the menu icon in the lower-right of your screen.
1. Tap *Settings*.
1. Tap *Host name* and enter `{{ streisand_ipv4_address }}`.
1. Tap *User Name* and enter `forward`.
1. Tap *Port* and enter `443`.
   * Port {{ ssh_port }} is available if your network does not block it.
1. Tap *Private Key File* and select the `streisand_rsa` file that you copied to your phone.
1. Tap *Dynamic Forward Port* and enter `1080`.
1. Tap *Forwards* and enter `L8888=localhost:8888`.
1. Go back and tap the *Connect Tunnel* button.
1. Verify that the fingerprint matches one of these:

   `{{ ssh_server_fingerprints.results[0].stdout }}`

   `{{ ssh_server_fingerprints.results[1].stdout }}`

You are now ready to configure your applications to route their traffic through the SSH tunnel provided by SPT.

#### Configuring Android to route most of its traffic through SPT ####
These steps will only work when you are connected via WiFi. They also must be applied individually to every WiFi network you connect to. Most applications will respect these settings, including the default browser, Chrome, YouTube, and many more.

1. Open your phone's Settings.
2. Tap *Wi-Fi* in the *Wireless & Networks* section.
3. Long-press on the WiFi network you are currently connected to. A pop-up menu will appear.
4. Tap *Modify network*.
5. Tap *Show advanced options*.
6. Select *Manual* in the Proxy section.
7. Tap *Proxy hostname* and enter `127.0.0.1`.
8. Tap *Proxy port* and enter `8888`.
9. Tap *Save*.

Some applications allow you to make these settings persistent for all networks. Twitter for Android and Firefox for Android can route their traffic through the SPT SSH tunnel regardless of your current connection (WiFi, 3G, HSPA+, LTE, etc.).

#### Configuring Twitter for Android to use SPT ####
1. Open Twitter.
2. Tap the three dots in the upper-right of the screen to open the menu.
3. Choose *Settings*.
4. Tap *General*.
5. Tap *Proxy*.
6. Check the *Enable HTTP Proxy* checkbox.
7. Tap *Proxy Host* and enter `127.0.0.1`.
8. Tap *Proxy Port* and enter `8888`.

#### Configuring Firefox for Android to use SPT ####
1. Open Firefox.
2. Type `about:config` into the address bar and tap the 'Go' button on your keyboard.
3. Type `proxy` into the search box.
4. Set the value of *network.proxy.socks* to `127.0.0.1`.
5. Set the value of *network.proxy.socks\_port* to `1080`.
6. Set the value of *network.proxy.socks\_remote\_dns* to `true`.
7. Set the value of *network.proxy.type* to `1`.
{% endif %}

<a name="notes"></a>
1. If you see the message "This account is for port forwarding only", make sure you configure your SSH client to not execute shell commands on remote server (`-N`).
