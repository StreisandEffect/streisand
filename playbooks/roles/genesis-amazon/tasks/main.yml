---
- set_fact:
    streisand_genesis_role: "genesis-amazon"

- name: "Get the {{ streisand_ssh_private_key }}.pub contents"
  command: "cat {{ streisand_ssh_private_key }}.pub"
  register: ssh_key
  changed_when: False

- name: Remove the 'streisand' SSH key from Amazon if it already exists. This is to prevent problems if two people with two different keys are sharing the same AWS account.
  ec2_key:
    name: streisand-ssh
    state: absent
    aws_access_key: "{{ aws_access_key }}"
    aws_secret_key: "{{ aws_secret_key }}"
    security_token: "{{ aws_session_token }}"
    region: "{{ aws_region }}"
    wait: yes

- name: Add the SSH key to Amazon under the name of 'streisand-ssh'
  ec2_key:
    name: streisand-ssh
    key_material: "{{ ssh_key.stdout }}"
    aws_access_key: "{{ aws_access_key }}"
    aws_secret_key: "{{ aws_secret_key }}"
    security_token: "{{ aws_session_token }}"
    region: "{{ aws_region }}"
    wait: yes

- name: Determine which AMI to use
  ec2_ami_facts:
    aws_access_key: "{{ aws_access_key }}"
    aws_secret_key: "{{ aws_secret_key }}"
    security_token: "{{ aws_session_token }}"
    owners: "{{ aws_ami_owner }}"
    region: "{{ aws_region }}"
    filters:
      name: "{{ aws_ami_name }}"
  register: ami

- name: Create the EC2 instance
  ec2:
    aws_access_key: "{{ aws_access_key }}"
    aws_secret_key: "{{ aws_secret_key }}"
    security_token: "{{ aws_session_token }}"
    instance_type: "{{ aws_instance_type }}"
    image: "{{ ami.images|sort(reverse=True,attribute='name')|map(attribute='image_id')|first }}"
    region: "{{ aws_region }}"
    vpc_subnet_id: "{{ aws_vpc_subnet_id | default(omit) }}"
    assign_public_ip: "{{ (aws_vpc_subnet_id is defined and aws_vpc_subnet_id != '') or omit }}"
    key_name: streisand-ssh
    group: "{{ aws_security_group }}"
    instance_tags:
      Name: "{{ aws_instance_name }}"
    wait: yes
  register: streisand_server

- name: Create CloudWatch alarm to auto-recover instance
  ec2_metric_alarm:
    name: "autorecover-{{ aws_instance_name }}"
    description: "This alarm will auto-recover the EC2 instance on host failure"
    state: present
    aws_access_key: "{{ aws_access_key }}"
    aws_secret_key: "{{ aws_secret_key }}"
    security_token: "{{ aws_session_token }}"
    region: "{{ aws_region }}"
    namespace: "AWS/EC2"
    metric: StatusCheckFailed_System
    statistic: Minimum
    comparison: ">"
    threshold: 0.0
    period: 60
    evaluation_periods: 2
    dimensions:
      InstanceId: "{{ streisand_server.instances[0].id }}"
    alarm_actions:
      - "arn:aws:automate:{{ aws_region }}:ec2:recover"
  when: aws_instance_type.startswith(("t2", "c3", "c4", "m3", "m4", "r3", "x1"))

- name: Wait until the server has finished booting and OpenSSH is accepting connections
  wait_for:
    host: "{{ streisand_server.instances[0].public_ip }}"
    port: 22
    search_regex: OpenSSH
    timeout: 600

- name: Allocate and associate Elastic IP
  ec2_eip:
    aws_access_key: "{{ aws_access_key }}"
    aws_secret_key: "{{ aws_secret_key }}"
    security_token: "{{ aws_session_token }}"
    region: "{{ aws_region }}"
    device_id: "{{ streisand_server.instances[0].id }}"
    in_vpc: "{{ aws_vpc_id is defined and aws_vpc_id != '' }}"
  register: instance_eip

- name: Create the in-memory inventory group
  add_host:
    name: "{{ instance_eip.public_ip }}"
    groups: streisand-host
    ansible_user: ubuntu
    ansible_become: yes

- name: Set the streisand_ipv4_address variable
  set_fact:
    streisand_ipv4_address: "{{ instance_eip.public_ip }}"

- name: Set the streisand_server_name variable
  set_fact:
    streisand_server_name: "{{ aws_instance_name | regex_replace('\\s', '_') }}"
