---

# Set up the PPA and install packages
- import_tasks: install.yml

- name: Generate private and public key for the server
  shell: "umask 077; wg genkey | tee {{ wireguard_server_private_key_file }} | wg pubkey > {{ wireguard_server_public_key_file }}"
  args:
    creates: "{{ wireguard_server_public_key_file }}"

- name: Register the server key file contents
  command: cat {{ item }}
  register: wireguard_server_key_files
  changed_when: False
  with_items:
    - "{{ wireguard_server_private_key_file }}"
    - "{{ wireguard_server_public_key_file }}"

- name: Set the server key material facts
  set_fact:
    wireguard_server_private_key: "{{ wireguard_server_key_files.results[0].stdout }}"
    wireguard_server_public_key:  "{{ wireguard_server_key_files.results[1].stdout }}"

- name: Create client directory
  file:
    path: "{{ wireguard_client_path }}"
    state: directory
    owner: root
    group: root
    mode: 0600

- name: Create a directory for each client
  file:
    path: "{{ wireguard_client_path }}/{{ client_name.stdout }}"
    state: directory
    owner: root
    group: root
    mode: 0600
  with_items: "{{ vpn_client_names.results }}"
  loop_control:
    loop_var: "client_name"
    label: "{{ client_name.item }}"

- name: Generate private and public key for each client
  shell: "umask 077; wg genkey | tee client.key | wg pubkey > client.pub"
  args:
    chdir: "{{ wireguard_client_path }}/{{ client_name.stdout }}"
    creates: client.key
  with_items: "{{ vpn_client_names.results }}"
  loop_control:
    loop_var: "client_name"
    label: "{{ client_name.item }}"

- name: Register client public keys
  command: cat client.pub
  args:
    chdir: "{{ wireguard_client_path }}/{{ client_name.stdout }}"
  with_items: "{{ vpn_client_names.results }}"
  loop_control:
    loop_var: "client_name"
    label: "{{ client_name.item }}"
  register: wireguard_client_pubkeys
  changed_when: False

- name: Register client private keys
  command: cat client.key
  args:
    chdir: "{{ wireguard_client_path }}/{{ client_name.stdout }}"
  with_items: "{{ vpn_client_names.results }}"
  loop_control:
    loop_var: "client_name"
    label: "{{ client_name.item }}"
  register: wireguard_client_privkeys
  changed_when: False

- name: Generate the client configuration profiles
  template:
    src: client.conf.j2
    dest: "{{ wireguard_client_path }}/{{ item[0].stdout }}/client.conf"
  with_together:
    - "{{ vpn_client_names.results }}"
    - "{{ wireguard_client_privkeys.results }}"
  loop_control:
    label: "{{ item[0].item }}"

- name: Generate OpenWrt configuration fragments
  template:
    src: client-openwrt.txt.j2
    dest: "{{ wireguard_client_path }}/{{ item[0].stdout }}/client-openwrt.txt"
  with_together:
    - "{{ vpn_client_names.results }}"
    - "{{ wireguard_client_privkeys.results }}"
  loop_control:
    label: "{{ item[0].item }}"

- name: Generate the server configuration
  template:
    src: "server.conf.j2"
    dest: "{{ wireguard_path }}/wg0.conf"
    owner: root
    group: root
    mode: 0600

- name: Enable reload-module-on-update to upgrade Wireguard without user confirmation
  file:
    path: "{{ wireguard_path }}/.reload-module-on-update"
    state: touch

# Set up the WireGuard firewall rules
- import_tasks: firewall.yml

- name: Enable the WireGuard service so it starts at boot, and bring up the WireGuard network interface
  systemd:
    name: wg-quick@wg0.service
    enabled: yes
    state: started
  # Temporary workaround for issue #500
  ignore_errors: yes

- name: "Configure DNSMasq to listen on {{ dnsmasq_wireguard_ip }}:53"
  template:
    src: wireguard_dnsmasq.conf.j2
    dest: /etc/dnsmasq.d/wireguard.conf

# NOTE(@cpu): We don't use a `notify` to "Restart dnsmasq" here because it seems
# that in some conditions Ansible mistakenly believes the dnsmasq restart can be
# skipped. We also don't use "reloaded" instead of "restarted" here because
# dnsmasq doesn't seem to reload _new_ config files in that case, just existing
# ones. A full restart is required in practice (sigh)
- name: "Restart DNSMasq to pick up the new configuration"
  service:
    name: dnsmasq
    state: restarted

# Generate Gateway documentation
- import_tasks: docs.yml
