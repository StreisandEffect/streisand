---

# Import the GPG playbook vars
- include_vars: "../../gpg/vars/main.yml"

- name: "Download the {{ project_name }} files"
  get_url:
    url: "{{ project_download_baseurl }}/{{ item.file }}"
    dest: "{{ project_download_location }}/{{ item.file }}"
    owner: www-data
    group: www-data
    mode: 0644
  with_items: "{{ project_download_files }}"

- name: "Download the {{ project_name }} signatures"
  get_url:
    url: "{{ project_download_baseurl }}/{{ item.sig }}"
    dest: "{{ project_download_location }}/{{ item.sig }}"
    owner: www-data
    group: www-data
    mode: 0644
  with_items: "{{ project_download_files }}"

- name: "Verify the {{ project_name }} download signatures with the Streisand GPG keyring"
  command: "gpgv2 --keyring {{ streisand_gpg_keyring }} {{ project_download_location }}/{{ item.sig }} {{ project_download_location }}/{{ item.file }}"
  register: gpg_verification_results
  with_items: "{{ project_download_files }}"

- name: "Verify the {{ project_name }} download signature checks all passed"
  assert:
    that:
      - "not item.failed"
      - "item.rc == 0"
    msg: "Verifying {{ item.item.file }} GPG signature failed!!"
  with_items: "{{ gpg_verification_results.results }}"
  # NOTE(@cpu): We really need a loop_control.label here because `assert` is
  # extremely verbose by default and the `{{ item }}` value used as the default
  # loop label will have *all* of the `gpgv2` output in it :-X
  loop_control:
    label: "{{ item.item.file }}"

- name: "Verify the {{ project_name }} download signatures were from the correct keys"
  assert:
    that:
      # By default gpgv outputs to stderr. For a good signature the first line
      # always ends being like:
      # "gpgv: Signature made Fri 16 Mar 2018 11:16:40 PM UTC using RSA key ID
      #   C3C07136"
      # Since we've already verified the gpgv2 return code we can just check for
      # the presence of the key ID we expect in the first line of stderr output
      # and be confident we saw a valid signature from the expected key ID and
      # not another unrelated key in the Streisand keyring.
      - "'key ID {{ project_signer_keyid }}' in '{{ item.stderr_lines[0] }}'"
    msg: "The GPG signature on {{ item.item.file }} was not from {{ project_signer_keyid }}"
  with_items: "{{ gpg_verification_results.results }}"
  # NOTE(@cpu): Similar to the assert above, this loop_control.label is
  # important to not flood stdout
  loop_control:
    label: "{{ item.item.file }}"
